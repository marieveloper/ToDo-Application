{"ast":null,"code":"// import configuration with API url; @ refers to the src directory\nimport config from \"@/config\";\n// import library for HTTP requests\nimport axios from \"axios\";\n// import JS method to use in this view\nimport { showToastMessage } from \"../js/util\";\nexport default {\n  name: \"ToDos\",\n  data() {\n    return {\n      todo: {\n        title: \"\",\n        description: \"\",\n        finished: false,\n        assigneeIdList: [],\n        dueDate: \"\"\n      },\n      todoUpdate: {\n        title: \"\",\n        description: \"\",\n        finished: false,\n        assigneeIdList: [],\n        dueDate: \"\",\n        finishedDate: \"\"\n      },\n      fields: [{\n        key: \"action\",\n        label: 'Actions'\n      }, {\n        key: \"title\",\n        label: \"Title\",\n        sortable: true\n      }, {\n        key: \"assigneeList\",\n        label: \"Assignees\",\n        sortable: true\n      }, {\n        key: \"createdDate\",\n        label: \"Created Date\",\n        sortable: true\n      }, {\n        key: \"dueDate\",\n        label: \"Due Date\",\n        sortable: true\n      }, {\n        key: \"finished\",\n        label: \"Finished\"\n      }],\n      finishedFields: [{\n        key: \"action\",\n        label: 'Actions'\n      }, {\n        key: \"title\",\n        label: \"Title\",\n        sortable: true\n      }, {\n        key: \"assigneeList\",\n        label: \"Assignees\",\n        sortable: true\n      }, {\n        key: \"createdDate\",\n        label: \"Created Date\",\n        sortable: true\n      }, {\n        key: \"dueDate\",\n        label: \"Due Date\",\n        sortable: true\n      }, {\n        key: \"finishedDate\",\n        label: \"Finished Date\",\n        sortable: true\n      }, {\n        key: \"finished\",\n        label: \"Finished\"\n      }],\n      items: [],\n      finishedToDos: [],\n      deleteMessage: \"\",\n      show: false,\n      selectMode: 'multi',\n      selected: []\n    };\n  },\n  methods: {\n    // send GET request to API to fetch all assignees\n    fetchAllToDos: function () {\n      axios.get(`${config.apiBaseUrl}/todos`).then(response => {\n        // log response data to the browser console\n        console.log(response.data);\n        // assign response to data variable\n        this.items = response.data;\n        this.finishedToDos = response.data.filter(todo => todo.finished === true);\n        this.items.forEach(item => {\n          item.dueDate = new Date(item.dueDate).toLocaleDateString();\n          item.createdDate = new Date(item.createdDate).toLocaleDateString();\n          item.finishedDate = new Date(item.finishedDate).toLocaleDateString();\n        });\n      });\n    },\n    onRowSelected(items) {\n      this.selected = items;\n      this.updateFinished(this.selected);\n      this.fetchAllToDos();\n    },\n    deleteToDo: function (id) {\n      // send DELETE request to API to delete a specific cat by ID\n      axios.delete(`${config.apiBaseUrl}/todos/${id}`).then(() => {\n        // update view by removing deleted assignee\n        this.items = this.items.filter(item => item.id !== id);\n        // show success message using BootstrapVue toast component\n        showToastMessage(this, \"Alert\", `Successfully deleted todo with ID ${id}!`, \"success\");\n      });\n    },\n    updateFinished: function (event, id) {\n      event.preventDefault();\n      // send PUT request to API to update a specific todo by ID\n      axios.put(`${config.apiBaseUrl}/todos/${id}`, {\n        finished: true\n      }).then(response => {\n        // log response data to the browser console\n        console.log(response.data);\n        // show success message using BootstrapVue toast component\n        showToastMessage(this, \"Alert\", `Successfully updated finished status of todo with ID ${id}!`, \"success\");\n        this.fetchAllToDos();\n      });\n    },\n    // executed on form submit\n    onSubmit: function (event) {\n      event.preventDefault();\n      axios.post(`${config.apiBaseUrl}/todos`, this.todo).then(response => {\n        // log response data to the browser console\n        console.log(response.data);\n        // show success message\n        showToastMessage(this, \"Alert\", `Successfully created a new todo with ID ${response.data.id}!`, \"success\");\n        // update view by adding created todo\n        this.fetchAllToDos();\n        // reset form\n        this.todo = {\n          title: \"\",\n          description: \"\",\n          finished: \"\",\n          assigneeIdList: \"\",\n          dueDate: \"\"\n        };\n        // close modal\n        this.show = false;\n      }).catch(error => {\n        // log error\n        console.log(error);\n        // show error message\n        const errObject = error.response.data.errors[0];\n        showToastMessage(this, \"Alert\", `Error: ${errObject.field} ${errObject.defaultMessage}!`, \"danger\");\n      });\n    }\n  },\n  // executed after the component has been started\n  created: function () {\n    this.fetchAllToDos();\n  }\n};","map":{"version":3,"mappings":"AA8KA;AACA;AACA;AACA;AACA;AACA;AAGA;EACAA;EACAC;IACA;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAC;QACAL;QACAC;QACAC;QACAC;QACAC;QACAE;MACA;MACAC,SACA;QAAAC;QAAAC;MAAA,GACA;QAAAD;QAAAC;QAAAC;MAAA,GACA;QAAAF;QAAAC;QAAAC;MAAA,GACA;QAAAF;QAAAC;QAAAC;MAAA,GACA;QAAAF;QAAAC;QAAAC;MAAA,GACA;QAAAF;QAAAC;MAAA,EACA;MACAE,iBACA;QAAAH;QAAAC;MAAA,GACA;QAAAD;QAAAC;QAAAC;MAAA,GACA;QAAAF;QAAAC;QAAAC;MAAA,GACA;QAAAF;QAAAC;QAAAC;MAAA,GACA;QAAAF;QAAAC;QAAAC;MAAA,GACA;QAAAF;QAAAC;QAAAC;MAAA,GACA;QAAAF;QAAAC;MAAA,EACA;MACAG;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACA;IACAC;MACAC;QACA;QACAC;QACA;QACA;QACA;QACA;UACAC;UACAA;UACAA;QACA;MACA;IACA;IACAC;MACA;MACA;MACA;IACA;IACAC;MACA;MACAJ;QACA;QACA;QACA;QACAK,iBACA,MACA,SACA,4CACA,UACA;MACA;IACA;IACAC;MACAC;MACA;MACAP;QAAAlB;MAAA,EACA;QACA;QACAmB;QACA;QACAI,iBACA,MACA,SACA,+DACA,UACA;QACA;MACA;IACA;IACA;IACAG;MACAD;MACAP,MACAS,8CACAC;QACA;QACAT;QACA;QACAI,iBACA,MACA,SACA,gEACA,UACA;QACA;QACA;QACA;QACA;UACAzB;UACAC;UACAC;UACAC;UACAC;QACA;QACA;QACA;MACA,GACA2B;QACA;QACAV;QACA;QACA;QACAI,iBACA,MACA,SACA,0DACA,SACA;MACA;IAEA;EACA;EAEA;EACAO;IACA;EACA;AAGA","names":["name","data","todo","title","description","finished","assigneeIdList","dueDate","todoUpdate","finishedDate","fields","key","label","sortable","finishedFields","items","finishedToDos","deleteMessage","show","selectMode","selected","methods","fetchAllToDos","axios","console","item","onRowSelected","deleteToDo","showToastMessage","updateFinished","event","onSubmit","post","then","catch","created"],"sourceRoot":"src/views","sources":["ToDos.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <div>\r\n            <h1>ToDos</h1>\r\n\r\n        </div>\r\n        <div>\r\n            <b-card>\r\n                <div class=\"createToDo\" style=\"float: right\">\r\n\r\n                    <b-btn class=\"m-1\" pill variant=\"success\" @click=\"show=true\">\r\n                        <b-icon icon=\"plus\"></b-icon>\r\n                        Create ToDo\r\n                    </b-btn>\r\n\r\n                </div>\r\n                <template>\r\n                    <div id=\"todos\">\r\n                        <b-table :select-mode=\"selectMode\" ref=\"selectableTable\"\r\n                                 selectable\r\n                                 @row-selected=\"onRowSelected\"\r\n                                 noCollapse\r\n                                 hover\r\n                                 responsive\r\n                                 :items=\"items\"\r\n                                 :fields=\"fields\">\r\n                            <template v-slot:cell(action)=\"data\">\r\n                                <router-link :to=\"'/todos/' + data.item.id\">\r\n                                    <b-btn class=\"m-1\" size=\"sm\" pill variant=\"primary\">\r\n                                        <b-icon icon=\"pencil\"></b-icon>\r\n                                    </b-btn>\r\n                                </router-link>\r\n                                <b-btn class=\"m-1\" size=\"sm\" pill variant=\"danger\"\r\n                                       v-on:click=\"deleteToDo(data.item.id)\">\r\n                                    <b-icon icon=\"trash\"></b-icon>\r\n                                </b-btn>\r\n                            </template>\r\n                            <template v-slot:cell(finished)=\"{ rowSelected }\">\r\n                                <template v-if=\"rowSelected\">\r\n                                    <span aria-hidden=\"true\">&check;</span>\r\n                                    <span class=\"sr-only\">Selected</span>\r\n                                </template>\r\n                                <template v-else>\r\n                                    <span aria-hidden=\"true\">&nbsp;</span>\r\n                                    <span class=\"sr-only\">Not selected</span>\r\n                                </template>\r\n                            </template>\r\n                            <template v-slot:cell(assigneeList)=\"data\">\r\n                                <template>\r\n                                    <div class=\"assignees\" v-for=\"assignee in data.item.assigneeList\"\r\n                                         v-bind:key=\"assignee.id\">\r\n                                        <b-badge pill variant=\"light\" class=\"text-wrap mb-1\" size=\"l\"\r\n                                                 style=\"font-size: medium;font-weight: normal;\">\r\n                                            {{ assignee.name }}, {{ assignee.prename }}\r\n                                        </b-badge>\r\n                                    </div>\r\n                                </template>\r\n                            </template>\r\n                        </b-table>\r\n                    </div>\r\n                </template>\r\n            </b-card>\r\n            <b-card class=\"my-2\">\r\n                <b-button v-b-toggle.collapse-1 variant=\"light\">Finished ToDos\r\n                    <b-icon icon=\"chevron-down\"></b-icon>\r\n                </b-button>\r\n                <template>\r\n                    <b-collapse id=\"collapse-1\" class=\"mt-2\">\r\n                        <div id=\"finishedTodos\">\r\n                            <b-table noCollapse hover responsive :items=\"finishedToDos\" :fields=\"finishedFields\">\r\n                                <template v-slot:cell(action)=\"data\">\r\n                                    <router-link :to=\"'/todos/' + data.item.id\">\r\n                                        <b-btn class=\"m-1\" size=\"sm\" pill variant=\"primary\">\r\n                                            <b-icon icon=\"pencil\"></b-icon>\r\n                                        </b-btn>\r\n                                    </router-link>\r\n                                    <b-btn class=\"m-1\" size=\"sm\" pill variant=\"danger\"\r\n                                           v-on:click=\"deleteToDo(data.item.id)\">\r\n                                        <b-icon icon=\"trash\"></b-icon>\r\n                                    </b-btn>\r\n                                </template>\r\n                                <template v-slot:cell(finished)=\"data\">\r\n                                    <b-form-checkbox\r\n                                        v-model=\"data.item.finished\"\r\n                                        v-on:change=\"updateFinished(data.item.id)\"\r\n                                    ></b-form-checkbox>\r\n                                </template>\r\n                                <template v-slot:cell(assigneeList)=\"data\">\r\n                                    <template>\r\n                                        <div class=\"assignees\" v-for=\"assignee in data.item.assigneeList\"\r\n                                             v-bind:key=\"assignee.id\">\r\n                                            <b-badge pill variant=\"light\" class=\"text-wrap mb-1\" size=\"l\"\r\n                                                     style=\"font-size: medium;font-weight: normal;\">\r\n                                                {{ assignee.name }}, {{ assignee.prename }}\r\n                                            </b-badge>\r\n                                        </div>\r\n                                    </template>\r\n                                </template>\r\n                            </b-table>\r\n                        </div>\r\n                    </b-collapse>\r\n                </template>\r\n            </b-card>\r\n        </div>\r\n        <b-modal\r\n            v-model=\"show\"\r\n            ref=\"modal\"\r\n            title=\"Create an ToDo\"\r\n            hide-footer\r\n        >\r\n            <div>\r\n                <div>\r\n                    <b-form @submit=\"onSubmit\">\r\n                        <b-form-group label=\"Title:\">\r\n                            <b-form-input\r\n                                v-model=\"todo.title\"\r\n                                type=\"text\"\r\n                                required\r\n                                invalid-feedback=\"Name is required\"\r\n                            ></b-form-input>\r\n                        </b-form-group>\r\n                        <b-form-group label=\"Description:\">\r\n                            <b-form-input\r\n                                v-model=\"todo.description\"\r\n                                type=\"text\"\r\n                                required\r\n                            ></b-form-input>\r\n                        </b-form-group>\r\n                        <b-form-group label=\"Finished\">\r\n                            <b-form-input\r\n                                v-model=\"todo.finished\"\r\n                                type=\"boolean\"\r\n                            ></b-form-input>\r\n                        </b-form-group>\r\n                        <b-form-group label=\"Assignees\">\r\n                            <b-form-input\r\n                                v-model=\"todo.assigneeIdList\"\r\n                                type=\"list\"\r\n                            ></b-form-input>\r\n                        </b-form-group>\r\n                        <b-form-group label=\"Due Date\">\r\n                            <b-form-input\r\n                                v-model=\"todo.dueDate\"\r\n                                type=\"list\"\r\n                            ></b-form-input>\r\n                        </b-form-group>\r\n                        <div class=\"w-100\">\r\n                            <b-button\r\n                                variant=\"danger\"\r\n                                size=\"sm\"\r\n                                class=\"float-right\"\r\n                                @click=\"show = false\"\r\n                            >\r\n                                Cancel\r\n                            </b-button>\r\n                            <b-button\r\n                                variant=\"primary\"\r\n                                size=\"sm\"\r\n                                class=\"float-right\"\r\n                                type=\"submit\"\r\n                            >\r\n                                Submit\r\n                            </b-button>\r\n                        </div>\r\n                    </b-form>\r\n                </div>\r\n            </div>\r\n        </b-modal>\r\n\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n// import configuration with API url; @ refers to the src directory\r\nimport config from \"@/config\";\r\n// import library for HTTP requests\r\nimport axios from \"axios\";\r\n// import JS method to use in this view\r\nimport {showToastMessage} from \"../js/util\";\r\n\r\n\r\nexport default {\r\n    name: \"ToDos\",\r\n    data() {\r\n        return {\r\n            todo: {\r\n                title: \"\",\r\n                description: \"\",\r\n                finished: false,\r\n                assigneeIdList: [],\r\n                dueDate: \"\"\r\n            },\r\n            todoUpdate: {\r\n                title: \"\",\r\n                description: \"\",\r\n                finished: false,\r\n                assigneeIdList: [],\r\n                dueDate: \"\",\r\n                finishedDate: \"\"\r\n            },\r\n            fields: [\r\n                {key: \"action\", label: 'Actions'},\r\n                {key: \"title\", label: \"Title\", sortable: true},\r\n                {key: \"assigneeList\", label: \"Assignees\", sortable: true},\r\n                {key: \"createdDate\", label: \"Created Date\", sortable: true},\r\n                {key: \"dueDate\", label: \"Due Date\", sortable: true},\r\n                {key: \"finished\", label: \"Finished\"}\r\n            ],\r\n            finishedFields: [\r\n                {key: \"action\", label: 'Actions'},\r\n                {key: \"title\", label: \"Title\", sortable: true},\r\n                {key: \"assigneeList\", label: \"Assignees\", sortable: true},\r\n                {key: \"createdDate\", label: \"Created Date\", sortable: true},\r\n                {key: \"dueDate\", label: \"Due Date\", sortable: true},\r\n                {key: \"finishedDate\", label: \"Finished Date\", sortable: true},\r\n                {key: \"finished\", label: \"Finished\"}\r\n            ],\r\n            items: [],\r\n            finishedToDos: [],\r\n            deleteMessage: \"\",\r\n            show: false,\r\n            selectMode: 'multi',\r\n            selected: []\r\n        };\r\n    },\r\n    methods: {\r\n        // send GET request to API to fetch all assignees\r\n        fetchAllToDos: function () {\r\n            axios.get(`${config.apiBaseUrl}/todos`).then((response) => {\r\n                // log response data to the browser console\r\n                console.log(response.data);\r\n                // assign response to data variable\r\n                this.items = response.data;\r\n                this.finishedToDos = response.data.filter(todo => todo.finished === true);\r\n                this.items.forEach(item => {\r\n                    item.dueDate = new Date(item.dueDate).toLocaleDateString();\r\n                    item.createdDate = new Date(item.createdDate).toLocaleDateString();\r\n                    item.finishedDate = new Date(item.finishedDate).toLocaleDateString();\r\n                });\r\n            });\r\n        },\r\n        onRowSelected(items) {\r\n            this.selected = items\r\n            this.updateFinished(this.selected);\r\n            this.fetchAllToDos();\r\n        },\r\n        deleteToDo: function (id) {\r\n            // send DELETE request to API to delete a specific cat by ID\r\n            axios.delete(`${config.apiBaseUrl}/todos/${id}`).then(() => {\r\n                // update view by removing deleted assignee\r\n                this.items = this.items.filter((item) => item.id !== id);\r\n                // show success message using BootstrapVue toast component\r\n                showToastMessage(\r\n                    this,\r\n                    \"Alert\",\r\n                    `Successfully deleted todo with ID ${id}!`,\r\n                    \"success\"\r\n                );\r\n            });\r\n        },\r\n        updateFinished: function (event, id) {\r\n            event.preventDefault();\r\n            // send PUT request to API to update a specific todo by ID\r\n            axios.put(`${config.apiBaseUrl}/todos/${id}`, {finished: true}\r\n            ).then((response) => {\r\n                // log response data to the browser console\r\n                console.log(response.data);\r\n                // show success message using BootstrapVue toast component\r\n                showToastMessage(\r\n                    this,\r\n                    \"Alert\",\r\n                    `Successfully updated finished status of todo with ID ${id}!`,\r\n                    \"success\"\r\n                );\r\n                this.fetchAllToDos();\r\n            });\r\n        },\r\n        // executed on form submit\r\n        onSubmit: function (event) {\r\n            event.preventDefault();\r\n            axios\r\n                .post(`${config.apiBaseUrl}/todos`, this.todo)\r\n                .then((response) => {\r\n                    // log response data to the browser console\r\n                    console.log(response.data);\r\n                    // show success message\r\n                    showToastMessage(\r\n                        this,\r\n                        \"Alert\",\r\n                        `Successfully created a new todo with ID ${response.data.id}!`,\r\n                        \"success\"\r\n                    );\r\n                    // update view by adding created todo\r\n                    this.fetchAllToDos();\r\n                    // reset form\r\n                    this.todo = {\r\n                        title: \"\",\r\n                        description: \"\",\r\n                        finished: \"\",\r\n                        assigneeIdList: \"\",\r\n                        dueDate: \"\"\r\n                    };\r\n                    // close modal\r\n                    this.show = false;\r\n                })\r\n                .catch((error) => {\r\n                    // log error\r\n                    console.log(error);\r\n                    // show error message\r\n                    const errObject = error.response.data.errors[0];\r\n                    showToastMessage(\r\n                        this,\r\n                        \"Alert\",\r\n                        `Error: ${errObject.field} ${errObject.defaultMessage}!`,\r\n                        \"danger\"\r\n                    );\r\n                });\r\n\r\n        }\r\n    },\r\n\r\n    // executed after the component has been started\r\n    created: function () {\r\n        this.fetchAllToDos();\r\n    }\r\n\r\n\r\n};\r\n</script>\r\n\r\n<style>\r\n#assignees {\r\n    text-align: center;\r\n    margin-top: 60px;\r\n}\r\n\r\nthead, tbody, tfoot, tr, td, th {\r\n    text-align: left;\r\n}\r\n\r\nb-btn {\r\n\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}