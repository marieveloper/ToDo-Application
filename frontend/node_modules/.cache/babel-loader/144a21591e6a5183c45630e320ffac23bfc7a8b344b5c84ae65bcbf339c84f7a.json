{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// import configuration with API url; @ refers to the src directory\nimport config from \"@/config\";\n// import library for HTTP requests\nimport axios from \"axios\";\n// import JS method to use in this view\nimport { showToastMessage } from \"../js/util\";\nexport default {\n  name: \"ToDoDetails\",\n  data() {\n    return {\n      todo: {\n        title: \"\",\n        description: \"\",\n        finished: \"\",\n        assigneeList: [],\n        createdDate: \"\",\n        dueDate: \"\",\n        finishedDate: \"\"\n      },\n      toDoToUpdate: {\n        id: \"\",\n        title: \"\",\n        description: \"\",\n        finished: \"\",\n        assigneeIdList: [],\n        dueDate: \"\"\n      },\n      assignees: [],\n      fields: [{\n        key: \"selected\",\n        label: 'Selected'\n      }, {\n        key: \"prename\",\n        label: \"Prename\",\n        sortable: true\n      }, {\n        key: \"name\",\n        label: \"Name\",\n        sortable: true\n      }],\n      items: [],\n      selectMode: 'multi',\n      sel: false,\n      show: false\n    };\n  },\n  computed: {},\n  methods: {\n    // send GET request to API to fetch all assignees\n    fetchAllAssignees: function (todo) {\n      //show model\n      this.show = true;\n      axios.get(`${config.apiBaseUrl}/assignees`).then(response => {\n        // log response data to the browser console\n        console.log(response.data);\n        // assign response to data variable\n        this.items = response.data;\n        //set selected rows\n        if (todo.assigneeIdList.length > 0) {\n          for (let i = 0; i < this.items.length; i++) {\n            for (let j = 0; j < todo.assigneeIdList.length; j++) {\n              if (this.items[i].id === todo.assigneeIdList[j]) {\n                this.items[i].selected = true;\n              }\n            }\n          }\n        }\n        this.toDoToUpdate = todo;\n      });\n    },\n    //executed on form submit for assignees\n    onSubmitAssignees: function (todo) {\n      //updates the assigneeList of the todo\n      let assignees = [];\n      console.log(this.selected);\n      this.selected.forEach(assignee => assignees.push(JSON.stringify(assignee.id)));\n      todo.assigneeIdList = assignees;\n      this.assignees = this.selected;\n      console.log(todo.assigneeIdList);\n      // close modal\n      this.show = false;\n    },\n    // executed on form submit\n    onSubmit: function (event) {\n      event.preventDefault();\n      axios.put(`${config.apiBaseUrl}/todos/${this.toDoToUpdate.id}`, this.toDoToUpdate).then(response => {\n        this.toDoToUpdate.assigneeIdList =\n        // log response data to the browser console\n        console.log(response.data);\n        // show success message\n        showToastMessage(this, \"Alert\", `Successfully updated assignee with ID ${response.data.id}!`, \"success\");\n        // redirect to the assignee list view\n        this.$router.push(\"/todos\");\n      }).catch(error => {\n        // log error\n        console.log(error);\n        // show error message\n        const errObject = error.response.data.errors[0];\n        showToastMessage(this, \"Alert\", `Error: ${errObject.field} ${errObject.defaultMessage}!`, \"danger\");\n      });\n    },\n    deleteToDo: function () {\n      // send DELETE request to API to delete the assignee by ID\n      axios.delete(`${config.apiBaseUrl}/todos/${this.todo.id}`).then(() => {\n        // show success message\n        showToastMessage(this, \"Alert\", `Successfully deleted assignee with ID ${this.todo.id}!`, \"success\");\n        // navigate to assignees list\n        this.$router.push(\"/todos\");\n      });\n    }\n  },\n  // executed after the component has been started\n  created: function () {\n    axios.get(`${config.apiBaseUrl}/todos/${this.$route.params.id}`).then(response => {\n      // log response data to the browser console\n      console.log(response.data);\n      // assign response to data variable\n      this.toDoToUpdate = response.data;\n      let assignees = [];\n      response.data.assigneeList.forEach(assignee => assignees.push(JSON.stringify(assignee.id)));\n      console.log(assignees);\n      this.toDoToUpdate.assigneeIdList = assignees;\n      this.toDoToUpdate.dueDate = new Date(this.toDoToUpdate.dueDate);\n      this.assignees = response.data.assigneeList;\n    });\n  }\n};","map":{"version":3,"mappings":";AAmHA;AACA;AACA;AACA;AACA;AACA;AAEA;EACAA;EACAC;IACA;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAC;QACAC;QACAR;QACAC;QACAC;QACAO;QACAJ;MACA;MACAK;MACAC,SACA;QAAAC;QAAAC;MAAA,GACA;QAAAD;QAAAC;QAAAC;MAAA,GACA;QAAAF;QAAAC;QAAAC;MAAA,EACA;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;EACAC;IACA;IACAC;MACA;MACA;MACAC;QACA;QACAC;QACA;QACA;QACA;QACA;UACA;YACA;cACA;gBACA;cACA;YACA;UACA;QACA;QACA;MACA;IACA;IAEA;IACAC;MACA;MACA;MACAD;MACA,sBACAE;MACA1B;MACA;MACAwB;MACA;MACA;IAEA;IAEA;IACAG;MACAC;MACAL,MACAM,6EACAC;QACA;QACA;QACAN;QACA;QACAO,iBACA,MACA,SACA,8DACA,UACA;QACA;QACA;MACA,GACAC;QACA;QACAR;QACA;QACA;QACAO,iBACA,MACA,SACA,0DACA,SACA;MACA;IACA;IAEAE;MACA;MACAV,MACAW,qDACAJ;QACA;QACAC,iBACA,MACA,SACA,0DACA,UACA;QACA;QACA;MACA;IACA;EACA;EAGA;EACAI;IACAZ,MACAa,2DACAN;MACA;MACAN;MACA;MACA;MACA;MACAa,mCACAX;MACAF;MACA;MACA;MACA;IACA;EACA;AACA","names":["name","data","todo","title","description","finished","assigneeList","createdDate","dueDate","finishedDate","toDoToUpdate","id","assigneeIdList","assignees","fields","key","label","sortable","items","selectMode","sel","show","computed","methods","fetchAllAssignees","axios","console","onSubmitAssignees","assignee","onSubmit","event","put","then","showToastMessage","catch","deleteToDo","delete","created","get","response"],"sourceRoot":"src/views","sources":["ToDo-details.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <h1>ToDo Details: {{ toDoToUpdate.title }}</h1>\r\n        <div>\r\n            <b-card>\r\n                <b-form @submit=\"onSubmit\">\r\n                    <b-form-group label=\"Title:\">\r\n                        <b-form-input\r\n                            v-model=\"toDoToUpdate.title\"\r\n                            type=\"text\"\r\n                            required\r\n                        ></b-form-input>\r\n                    </b-form-group>\r\n                    <b-form-group label=\"Description:\">\r\n                        <b-form-input\r\n                            v-model=\"toDoToUpdate.description\"\r\n                            type=\"text\"\r\n                            required\r\n                        ></b-form-input>\r\n                    </b-form-group>\r\n                    <b-form-group>\r\n                        <b-form-checkbox\r\n                            v-model=\"toDoToUpdate.finished\"\r\n                            type=\"boolean\"\r\n                            class=\"m-1\"\r\n                        > Finished\r\n                        </b-form-checkbox>\r\n                    </b-form-group>\r\n                    <b-form-group>\r\n                        <b-form-row>\r\n                            <template>\r\n                                <div class=\"assignees\" v-for=\"assignee in assignees\"\r\n                                     v-bind:key=\"assignee.id\">\r\n                                    <b-badge pill variant=\"light\" class=\"text-wrap m-1\" size=\"l\"\r\n                                             style=\"font-size: medium;font-weight: normal;\">\r\n                                        {{ assignee.name }}, {{ assignee.prename }}\r\n                                    </b-badge>\r\n                                </div>\r\n                            </template>\r\n                        </b-form-row>\r\n                        <b-btn class=\"m-1\" pill variant=\"outline-secondary\" @click=\"fetchAllAssignees(toDoToUpdate)\">\r\n                            Update Assignees\r\n                            <b-icon icon=\"person-plus\"></b-icon>\r\n                        </b-btn>\r\n                    </b-form-group>\r\n                    <b-form-group label=\"Due Date\">\r\n                        <b-form-datepicker id=\"example-datepicker\" v-model=\"toDoToUpdate.dueDate\"\r\n                                           class=\"mb-2\"></b-form-datepicker>\r\n                    </b-form-group>\r\n                    <b-button type=\"submit\" variant=\"primary\">Submit</b-button>\r\n                    <b-button\r\n                        type=\"button\"\r\n                        variant=\"danger\"\r\n                        v-on:click=\"deleteToDo()\"\r\n                    >Delete\r\n                    </b-button\r\n                    >\r\n                </b-form>\r\n            </b-card>\r\n        </div>\r\n\r\n        <b-modal\r\n            v-model=\"show\"\r\n            ref=\"modal\"\r\n            title=\"Update Assignees\"\r\n            hide-footer\r\n            size=\"lg\"\r\n        >\r\n            <div>\r\n                <div>\r\n                    <b-form @submit=\"onSubmitAssignees(toDoToUpdate)\">\r\n                        <b-table\r\n                            noCollapse\r\n                            hover\r\n                            responsive\r\n                            :items=\"items\"\r\n                            :fields=\"fields\"\r\n                            data-search=\"true\">\r\n                            <template v-slot:cell(selected)=\"{data}\">\r\n                                <template v-if=\"data.item.selected\">\r\n                                    <b-form-checkbox\r\n                                        v-model=\"data.item.selected\"\r\n                                        type=\"boolean\"\r\n                                        class=\"m-1\"\r\n                                    > Selected\r\n                                    </b-form-checkbox>\r\n                                </template>\r\n                            </template>\r\n                        </b-table>\r\n                        <div class=\"w-100\">\r\n                            <b-button\r\n                                variant=\"danger\"\r\n                                size=\"sm\"\r\n                                class=\"float-right\"\r\n                                @click=\"show = false\"\r\n                            >\r\n                                Cancel\r\n                            </b-button>\r\n                            <b-button\r\n                                variant=\"primary\"\r\n                                size=\"sm\"\r\n                                class=\"float-right\"\r\n                                type=\"submit\"\r\n                            >\r\n                                Submit\r\n                            </b-button>\r\n                        </div>\r\n                    </b-form>\r\n                </div>\r\n            </div>\r\n        </b-modal>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n// import configuration with API url; @ refers to the src directory\r\nimport config from \"@/config\";\r\n// import library for HTTP requests\r\nimport axios from \"axios\";\r\n// import JS method to use in this view\r\nimport {showToastMessage} from \"../js/util\";\r\n\r\nexport default {\r\n    name: \"ToDoDetails\",\r\n    data() {\r\n        return {\r\n            todo: {\r\n                title: \"\",\r\n                description: \"\",\r\n                finished: \"\",\r\n                assigneeList: [],\r\n                createdDate: \"\",\r\n                dueDate: \"\",\r\n                finishedDate: \"\"\r\n            },\r\n            toDoToUpdate: {\r\n                id: \"\",\r\n                title: \"\",\r\n                description: \"\",\r\n                finished: \"\",\r\n                assigneeIdList: [],\r\n                dueDate: \"\"\r\n            },\r\n            assignees: [],\r\n            fields: [\r\n                {key: \"selected\", label: 'Selected'},\r\n                {key: \"prename\", label: \"Prename\", sortable: true},\r\n                {key: \"name\", label: \"Name\", sortable: true}\r\n            ],\r\n            items: [],\r\n            selectMode: 'multi',\r\n            sel : false,\r\n            show: false\r\n        };\r\n    },\r\n    computed: {},\r\n    methods: {\r\n        // send GET request to API to fetch all assignees\r\n        fetchAllAssignees: function (todo) {\r\n            //show model\r\n            this.show = true;\r\n            axios.get(`${config.apiBaseUrl}/assignees`).then((response) => {\r\n                // log response data to the browser console\r\n                console.log(response.data);\r\n                // assign response to data variable\r\n                this.items = response.data;\r\n                //set selected rows\r\n                if(todo.assigneeIdList.length > 0){\r\n                    for (let i = 0; i < this.items.length; i++) {\r\n                        for (let j = 0; j < todo.assigneeIdList.length; j++) {\r\n                            if (this.items[i].id === todo.assigneeIdList[j]) {\r\n                                this.items[i].selected = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                this.toDoToUpdate = todo;\r\n            });\r\n        }\r\n        ,\r\n        //executed on form submit for assignees\r\n        onSubmitAssignees: function (todo) {\r\n            //updates the assigneeList of the todo\r\n            let assignees = [];\r\n            console.log(this.selected);\r\n            this.selected.forEach(\r\n                assignee => assignees.push(JSON.stringify(assignee.id)));\r\n            todo.assigneeIdList = assignees;\r\n            this.assignees = this.selected;\r\n            console.log(todo.assigneeIdList);\r\n            // close modal\r\n            this.show = false;\r\n\r\n        }\r\n        ,\r\n        // executed on form submit\r\n        onSubmit: function (event) {\r\n            event.preventDefault();\r\n            axios\r\n                .put(`${config.apiBaseUrl}/todos/${this.toDoToUpdate.id}`, this.toDoToUpdate)\r\n                .then((response) => {\r\n                    this.toDoToUpdate.assigneeIdList =\r\n                        // log response data to the browser console\r\n                        console.log(response.data);\r\n                    // show success message\r\n                    showToastMessage(\r\n                        this,\r\n                        \"Alert\",\r\n                        `Successfully updated assignee with ID ${response.data.id}!`,\r\n                        \"success\"\r\n                    );\r\n                    // redirect to the assignee list view\r\n                    this.$router.push(\"/todos\");\r\n                })\r\n                .catch((error) => {\r\n                    // log error\r\n                    console.log(error);\r\n                    // show error message\r\n                    const errObject = error.response.data.errors[0];\r\n                    showToastMessage(\r\n                        this,\r\n                        \"Alert\",\r\n                        `Error: ${errObject.field} ${errObject.defaultMessage}!`,\r\n                        \"danger\"\r\n                    );\r\n                });\r\n        }\r\n        ,\r\n        deleteToDo: function () {\r\n            // send DELETE request to API to delete the assignee by ID\r\n            axios\r\n                .delete(`${config.apiBaseUrl}/todos/${this.todo.id}`)\r\n                .then(() => {\r\n                    // show success message\r\n                    showToastMessage(\r\n                        this,\r\n                        \"Alert\",\r\n                        `Successfully deleted assignee with ID ${this.todo.id}!`,\r\n                        \"success\"\r\n                    );\r\n                    // navigate to assignees list\r\n                    this.$router.push(\"/todos\");\r\n                });\r\n        }\r\n    },\r\n\r\n\r\n// executed after the component has been started\r\n    created: function () {\r\n        axios\r\n            .get(`${config.apiBaseUrl}/todos/${this.$route.params.id}`)\r\n            .then((response) => {\r\n                // log response data to the browser console\r\n                console.log(response.data);\r\n                // assign response to data variable\r\n                this.toDoToUpdate = response.data;\r\n                let assignees = [];\r\n                response.data.assigneeList.forEach(\r\n                    assignee => assignees.push(JSON.stringify(assignee.id)));\r\n                console.log(assignees);\r\n                this.toDoToUpdate.assigneeIdList = assignees;\r\n                this.toDoToUpdate.dueDate = new Date(this.toDoToUpdate.dueDate);\r\n                this.assignees = response.data.assigneeList;\r\n            });\r\n    }\r\n}\r\n;\r\n</script>\r\n\r\n<style>\r\n\r\n\r\nform .btn {\r\n    margin-right: 5px;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}