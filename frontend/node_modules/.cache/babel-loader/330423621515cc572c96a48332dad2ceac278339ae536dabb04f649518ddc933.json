{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// import configuration with API url; @ refers to the src directory\nimport config from \"@/config\";\n// import library for HTTP requests\nimport axios from \"axios\";\n// import JS method to use in this view\nimport { showToastMessage } from \"@/js/util\";\nimport { deleteToDoById, fetchAllToDos, csvExport, transformDTO, toDoTableFields, toDoTableFinishedFields, rowClickedItem, filter } from \"@/js/toDo-rest-client\";\nimport { fetchAllAssignees, assigneeSelectTableFields } from \"@/js/assignee-rest-client\";\nexport default {\n  name: \"ToDos\",\n  data() {\n    return {\n      todo: {\n        title: \"\",\n        description: \"\",\n        finished: false,\n        assigneeIdList: [],\n        dueDate: \"\",\n        createdDate: \"\"\n      },\n      fields: [],\n      finishedFields: [],\n      assigneeFields: [],\n      items: [],\n      perPage: 5,\n      currentPage: 1,\n      totalRows: 0,\n      totalFinishedRows: 0,\n      finishedToDos: [],\n      deleteMessage: \"\",\n      show: false,\n      showDelete: false,\n      assignees: [],\n      filter: null,\n      filterFinished: null,\n      filterOn: [\"title\"],\n      assigneeItems: []\n    };\n  },\n  computed: {\n    DateNow() {\n      return new Date(Date.now()).toLocaleDateString();\n    },\n    currentPageItems() {\n      const start = (this.currentPage - 1) * this.perPage;\n      return this.filteredItems.slice(start, start + this.perPage);\n    },\n    filteredItems() {\n      return this.items.filter(item => {\n        if (!this.filter) return true;\n        const filter = this.filter.toLowerCase();\n        return item.title.toLowerCase().indexOf(filter) > -1;\n      });\n    },\n    filteredFinishedItems() {\n      return this.finishedToDos.filter(item => {\n        if (!this.filter) return true;\n        const filter = this.filter.toLowerCase();\n        return item.title.toLowerCase().indexOf(filter) > -1;\n      });\n    },\n    selectedRows() {\n      return this.assigneeItems.filter(item => item.selected);\n    }\n  },\n  mounted() {\n    // Set the initial number of items\n    this.totalRows = this.filteredItems.length;\n    this.totalFinishedRows = this.filteredFinishedItems.length;\n  },\n  methods: {\n    //filter items\n    onFiltered(filteredItems) {\n      // Trigger pagination to update the number of buttons/pages due to filtering\n      this.totalRows = filteredItems.length;\n      this.totalFinishedRows = filteredItems.length;\n      this.currentPage = 1;\n    },\n    // send GET request to API to fetch all todos\n    fetchAllToDos: async function () {\n      this.items = await fetchAllToDos();\n      this.finishedToDos = this.items.filter(todo => todo.finished === true);\n      this.items.forEach(item => {\n        item.dueDate = new Date(item.dueDate);\n        item.createdDate = new Date(item.createdDate);\n        item.finishedDate = new Date(item.finishedDate);\n      });\n      this.items = this.items.filter(todo => todo.finished === false);\n    },\n    //send GET request to API to fetch all assignees\n    fetchAllAssignees: async function () {\n      this.assigneeItems = await fetchAllAssignees();\n      //sets preselected assignees of todos\n      for (const element of this.items) {\n        for (const assignee of this.assignees) {\n          if (element.id === assignee.id) {\n            this.$set(element, 'selected', true);\n          }\n        }\n      }\n    },\n    //show modal to create new todo\n    createToDo: function () {\n      this.show = true;\n      this.assignees = [];\n      this.fetchAllAssignees();\n      this.todo = {\n        title: \"\",\n        description: \"\",\n        finished: false,\n        assigneeIdList: [],\n        dueDate: \"\",\n        finishedDate: \"\"\n      };\n    },\n    csvExport: async function () {\n      await csvExport();\n      showToastMessage(this, \"Alert\", `Successfully exported all Todos as CSV!`, \"success\");\n    },\n    selectAssignees: function (todo) {\n      //updates the assigneeIdList of the todo\n      let assigneeIds = [];\n      this.selectedRows.forEach(assignee => assigneeIds.push(JSON.stringify(assignee.id)));\n      todo.assigneeIdList = assigneeIds;\n      this.assignees = this.selectedRows;\n    },\n    // sets the selected assignees of the todo\n    rowClicked(item) {\n      rowClickedItem(item);\n    },\n    deleteToDo: async function (id) {\n      await deleteToDoById(id);\n      showToastMessage(this, \"Alert\", `Successfully deleted todo with ID ${id}!`, \"success\");\n      this.showDelete = false;\n      await this.fetchAllToDos();\n    },\n    showDeleteModal: function (id) {\n      this.todo.id = id;\n      this.showDelete = true;\n    },\n    updateFinished: function (todo) {\n      const toDoToUpdate = transformDTO(todo);\n      // send PUT request to API to update a specific todo by ID\n      axios.put(`${config.apiBaseUrl}/todos/${todo.id}`, toDoToUpdate).then(() => {\n        showToastMessage(this, \"Alert\", `Successfully updated finished status of todo with ID ${todo.id}!`, \"success\");\n        this.fetchAllToDos();\n      });\n    },\n    // executed on form submit\n    onSubmitToDo: function (event) {\n      this.selectAssignees(this.todo);\n      event.preventDefault();\n      axios.post(`${config.apiBaseUrl}/todos`, this.todo).then(response => {\n        this.todo.createdDate = this.DateNow;\n        showToastMessage(this, \"Alert\", `Successfully created a new todo with ID ${response.data.id}!`, \"success\");\n        this.fetchAllToDos();\n        this.show = false;\n        this.assignees = [];\n      }).catch(error => {\n        const errObject = error.response.data.errors[0];\n        showToastMessage(this, \"Alert\", `Error: ${errObject.field} ${errObject.defaultMessage}!`, \"danger\");\n      });\n    }\n  },\n  // executed after the component has been started\n  created: function () {\n    this.fetchAllToDos();\n    this.assigneeFields = assigneeSelectTableFields();\n    this.fields = toDoTableFields();\n    this.finishedFields = toDoTableFinishedFields();\n  }\n};","map":{"version":3,"mappings":";AAiNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;EACAA;EACAC;IACA;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACAC;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MACA;QACA;QACA;QACA;MACA;IACA;IACAC;MACA;QACA;QACA;QACA;MACA;IACA;IACAC;MACA;IACA;EACA;EACAC;IACA;IACA;IACA;EACA;EACAC;IACA;IACAC;MACA;MACA;MACA;MACA;IACA;IACA;IACAC;MACA;MACA;MACA;QACAC;QACAA;QACAA;MACA;MACA;IACA;IACA;IACAC;MACA;MACA;MACA;QACA;UACA;YACA;UACA;QACA;MACA;IACA;IACA;IACAC;MACA;MACA;MACA;MACA;QACAnC;QACAC;QACAC;QACAC;QACAC;QACAgC;MACA;IACA;IACAC;MACA;MACAC;IACA;IACAC;MACA;MACA;MACA,0BACAC;MACAzC;MACA;IACA;IACA;IACA0C;MACAC;IACA;IACAC;MACA;MACAL;MACA;MACA;IACA;IACAM;MACA;MACA;IACA;IACAC;MACA;MACA;MACAC,gEACA;QACAR,8GACA;QACA;MACA;IACA;IACA;IACAS;MACA;MACAC;MACAF,MACAG,8CACAC;QACA;QACAZ;QACA;QACA;QACA;MACA,GACAa;QACA;QACAb;MACA;IACA;EACA;EACA;EACAc;IACA;IACA;IACA;IACA;EACA;AACA","names":["name","data","todo","title","description","finished","assigneeIdList","dueDate","createdDate","fields","finishedFields","assigneeFields","items","perPage","currentPage","totalRows","totalFinishedRows","finishedToDos","deleteMessage","show","showDelete","assignees","filter","filterFinished","filterOn","assigneeItems","computed","DateNow","currentPageItems","filteredItems","filteredFinishedItems","selectedRows","mounted","methods","onFiltered","fetchAllToDos","item","fetchAllAssignees","createToDo","finishedDate","csvExport","showToastMessage","selectAssignees","assignee","rowClicked","rowClickedItem","deleteToDo","showDeleteModal","updateFinished","axios","onSubmitToDo","event","post","then","catch","created"],"sourceRoot":"src/views","sources":["ToDos.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <div>\r\n            <b-card>\r\n                <b-card-header><h1>ToDos</h1></b-card-header>\r\n                <b-row class=\"mb-2\">\r\n                    <b-col lg=\"6\" class=\"my-1\">\r\n                        <b-input-group>\r\n                            <b-form-input id=\"filter-input\" v-model=\"filter\" type=\"search\"\r\n                                          placeholder=\"Search\"></b-form-input>\r\n                            <b-icon icon=\"search\" class=\"align-self-center m-2 h5\"></b-icon>\r\n                        </b-input-group>\r\n                    </b-col>\r\n                    <b-col lg=\"6\" class=\"my-1 \">\r\n                        <div class=\"createToDo\" style=\"float: right\">\r\n                            <b-btn class=\"m-1\" pill variant=\"outline-success\" @click=\"createToDo\">\r\n                                <b-icon icon=\"plus\"></b-icon>\r\n                                Create ToDo\r\n                            </b-btn>\r\n                        </div>\r\n                        <div class=\"createToDo\" style=\"float: right\">\r\n                            <b-btn class=\"m-1\" pill variant=\"outline-dark\" @click=\"csvExport\">\r\n                                <b-icon icon=\"download\"></b-icon>\r\n                                Export ToDo\r\n                            </b-btn>\r\n                        </div>\r\n                    </b-col>\r\n                </b-row>\r\n                <template>\r\n                    <div id=\"todos\">\r\n                        <b-table id=\"todos\" noCollapse hover responsive :items=\"currentPageItems\" :fields=\"fields\"\r\n                                 :filter=\"filter\" @filtered=\"onFiltered\" :filter-included-fields=\"filterOn\"\r\n                                 :per-page=\"5\" :current-page=\"1\" paginated>\r\n                            <template v-slot:cell(action)=\"data\">\r\n                                <router-link :to=\"'/todos/' + data.item.id\">\r\n                                    <b-btn class=\"m-1\" size=\"sm\" pill variant=\"outline-primary\">\r\n                                        <b-icon icon=\"pencil\"></b-icon>\r\n                                    </b-btn>\r\n                                </router-link>\r\n                                <b-btn class=\"m-1\" size=\"sm\" pill variant=\"outline-danger\"\r\n                                       v-on:click=\"showDeleteModal(data.item.id)\">\r\n                                    <b-icon icon=\"trash\"></b-icon>\r\n                                </b-btn>\r\n                            </template>\r\n                            <template v-slot:cell(finished)=\"data\">\r\n                                <b-form>\r\n                                    <b-form-checkbox v-model=\"data.item.finished\"\r\n                                                     v-on:change=\"updateFinished(data.item)\"></b-form-checkbox>\r\n                                </b-form>\r\n                            </template>\r\n                            <template v-slot:cell(assigneeList)=\"data\">\r\n                                <template>\r\n                                    <div class=\"assignees\" v-for=\"assignee in data.item.assigneeList\"\r\n                                         v-bind:key=\"assignee.id\">\r\n                                        <router-link :to=\"'/assignees/' + assignee.id\">\r\n                                            <b-badge pill variant=\"light\" class=\"text-wrap mb-1\" size=\"l\"\r\n                                                     style=\"font-size: medium;font-weight: normal;\">\r\n                                                {{ assignee.name }}, {{ assignee.prename }}\r\n                                            </b-badge>\r\n                                        </router-link>\r\n                                    </div>\r\n                                </template>\r\n                            </template>\r\n                            <template v-slot:cell(createdDate)=\"data\">\r\n                                <template>\r\n                                    <b-form>\r\n                                        {{ data.item.createdDate.toLocaleDateString() }}\r\n                                    </b-form>\r\n                                </template>\r\n                            </template>\r\n                            <template v-slot:cell(dueDate)=\"data\">\r\n                                <template>\r\n                                    <b-form>\r\n                                        {{ data.item.dueDate.toLocaleDateString() }}\r\n                                    </b-form>\r\n                                </template>\r\n                            </template>\r\n                        </b-table>\r\n                    </div>\r\n                    <b-card-footer>\r\n                        <b-pagination v-model=\"currentPage\" :total-rows=\"filteredItems.length\" :per-page=\"perPage\"\r\n                                      align=\"center\" pills></b-pagination>\r\n                    </b-card-footer>\r\n                </template>\r\n            </b-card>\r\n            <b-card class=\"my-2\">\r\n                <b-button pill v-b-toggle.collapse-1 variant=\"light\" size=\"lg\">Finished ToDos\r\n                    <b-icon icon=\"chevron-down\"></b-icon>\r\n                </b-button>\r\n                <template>\r\n                    <b-collapse id=\"collapse-1\" class=\"mt-2\">\r\n                        <div id=\"finishedTodos\">\r\n                            <b-table noCollapse hover responsive :items=\"filteredFinishedItems\" :fields=\"finishedFields\"\r\n                                     :filter=\"filter\" @filtered=\"onFiltered\"\r\n                                     :filter-included-fields=\"filterOn\">\r\n                                <template v-slot:cell(action)=\"data\">\r\n                                    <router-link :to=\"'/todos/' + data.item.id\">\r\n                                        <b-btn class=\"m-1\" size=\"sm\" pill variant=\"outline-primary\">\r\n                                            <b-icon icon=\"pencil\"></b-icon>\r\n                                        </b-btn>\r\n                                    </router-link>\r\n                                    <b-btn class=\"m-1\" size=\"sm\" pill variant=\"outline-danger\"\r\n                                           v-on:click=\"showDeleteModal(data.item.id)\">\r\n                                        <b-icon icon=\"trash\"></b-icon>\r\n                                    </b-btn>\r\n                                </template>\r\n                                <template v-slot:cell(finished)=\"data\">\r\n                                    <b-form>\r\n                                        <b-form-checkbox v-model=\"data.item.finished\"\r\n                                                         v-on:change=\"updateFinished(data.item)\"></b-form-checkbox>\r\n                                    </b-form>\r\n                                </template>\r\n                                <template v-slot:cell(assigneeList)=\"data\">\r\n                                    <template>\r\n                                        <div class=\"assignees\" v-for=\"assignee in data.item.assigneeList\"\r\n                                             v-bind:key=\"assignee.id\">\r\n                                            <router-link :to=\"'/assignees/' + assignee.id\">\r\n                                                <b-badge pill variant=\"light\" class=\"text-wrap mb-1\" size=\"l\"\r\n                                                         style=\"font-size: medium;font-weight: normal;\">\r\n                                                    {{ assignee.name }}, {{ assignee.prename }}\r\n                                                </b-badge>\r\n                                            </router-link>\r\n                                        </div>\r\n                                    </template>\r\n                                </template>\r\n                                <template v-slot:cell(createdDate)=\"data\">\r\n                                    <template>\r\n                                        <b-form>\r\n                                            {{ data.item.createdDate.toLocaleDateString() }}\r\n                                        </b-form>\r\n                                    </template>\r\n                                </template>\r\n                                <template v-slot:cell(dueDate)=\"data\">\r\n                                    <template>\r\n                                        <b-form>\r\n                                            {{ data.item.dueDate.toLocaleDateString() }}\r\n                                        </b-form>\r\n                                    </template>\r\n                                </template>\r\n                                <template v-slot:cell(finishedDate)=\"data\">\r\n                                    <template>\r\n                                        <b-form>\r\n                                            {{ data.item.finishedDate.toLocaleDateString() }}\r\n                                        </b-form>\r\n                                    </template>\r\n                                </template>\r\n                            </b-table>\r\n                        </div>\r\n                    </b-collapse>\r\n                </template>\r\n            </b-card>\r\n        </div>\r\n        <b-modal v-model=\"show\" ref=\"modal\" title=\"Create an ToDo\" hide-footer>\r\n            <div>\r\n                <div>\r\n                    <b-form @submit=\"onSubmitToDo\">\r\n                        <b-form-group label=\"Title:\">\r\n                            <b-form-input v-model=\"todo.title\" type=\"text\" required\r\n                                          invalid-feedback=\"Name is required\"></b-form-input>\r\n                        </b-form-group>\r\n                        <b-form-group label=\"Description:\">\r\n                            <b-form-input v-model=\"todo.description\" type=\"text\" required></b-form-input>\r\n                        </b-form-group>\r\n                        <b-form-group>\r\n                            <b-btn v-b-toggle.collapse-2 class=\"m-1\" pill variant=\"outline-secondary\">\r\n                                Select Assignees\r\n                                <b-icon icon=\"person-plus\"></b-icon>\r\n                            </b-btn>\r\n                            <b-collapse id=\"collapse-2\" class=\"mt-2\">\r\n                                <div id=\"assignees\">\r\n                                    <b-table noCollapse hover responsive :items=\"assigneeItems\" :fields=\"assigneeFields\" @row-clicked=\"rowClicked\">\r\n                                        <template v-slot:cell(selected)=\"{ item, field: { key } }\">\r\n                                            <b-checkbox v-model=\"item[key]\" type=\"boolean\"></b-checkbox>\r\n                                        </template>\r\n                                    </b-table>\r\n                                </div>\r\n                            </b-collapse>\r\n                        </b-form-group>\r\n                        <b-form-group label=\"Due Date\">\r\n                            <b-form-datepicker id=\"example-datepicker\" v-model=\"todo.dueDate\"\r\n                                               class=\"mb-2\"></b-form-datepicker>\r\n                        </b-form-group>\r\n                        <div class=\"w-100\">\r\n                            <b-button pill variant=\"outline-danger\" class=\"float-right m-1\" @click=\"show = false\">\r\n                                Cancel\r\n                            </b-button>\r\n                            <b-button pill variant=\"outline-primary\" class=\"float-right m-1\" type=\"submit\">\r\n                                Submit\r\n                            </b-button>\r\n                        </div>\r\n                    </b-form>\r\n                </div>\r\n            </div>\r\n        </b-modal>\r\n        <b-modal v-model=\"showDelete\" ref=\"modal\" title=\"Delete\" hide-footer>\r\n            Are you sure you want to delete this ToDo with ID {{ todo.id }}? You cannot undo this action.\r\n            <div class=\"w-100 mt-1\">\r\n                <b-button pill variant=\"outline-danger\" class=\"float-right m-1\" @click=\"showDelete= false\">\r\n                    Cancel\r\n                </b-button>\r\n                <b-button pill variant=\"outline-primary\" class=\"float-right m-1\" type=\"submit\"\r\n                          @click=\"deleteToDo(todo.id)\">\r\n                    Submit\r\n                </b-button>\r\n            </div>\r\n        </b-modal>\r\n    </div>\r\n</template>\r\n<script>\r\n// import configuration with API url; @ refers to the src directory\r\nimport config from \"@/config\";\r\n// import library for HTTP requests\r\nimport axios from \"axios\";\r\n// import JS method to use in this view\r\nimport {showToastMessage} from \"@/js/util\";\r\nimport {deleteToDoById, fetchAllToDos, csvExport, transformDTO, toDoTableFields, toDoTableFinishedFields, rowClickedItem, filter} from \"@/js/toDo-rest-client\";\r\nimport {fetchAllAssignees, assigneeSelectTableFields} from \"@/js/assignee-rest-client\";\r\n\r\nexport default {\r\n    name: \"ToDos\",\r\n    data() {\r\n        return {\r\n            todo: {\r\n                title: \"\",\r\n                description: \"\",\r\n                finished: false,\r\n                assigneeIdList: [],\r\n                dueDate: \"\",\r\n                createdDate: \"\"\r\n            },\r\n            fields: [],\r\n            finishedFields: [],\r\n            assigneeFields: [],\r\n            items: [],\r\n            perPage: 5,\r\n            currentPage: 1,\r\n            totalRows: 0,\r\n            totalFinishedRows: 0,\r\n            finishedToDos: [],\r\n            deleteMessage: \"\",\r\n            show: false,\r\n            showDelete: false,\r\n            assignees: [],\r\n            filter: null,\r\n            filterFinished: null,\r\n            filterOn: [\"title\"],\r\n            assigneeItems: []\r\n        };\r\n    },\r\n    computed: {\r\n        DateNow() {\r\n            return new Date(Date.now()).toLocaleDateString();\r\n        },\r\n        currentPageItems() {\r\n            const start = (this.currentPage - 1) * this.perPage;\r\n            return this.filteredItems.slice(start, start + this.perPage);\r\n        },\r\n        filteredItems() {\r\n            return this.items.filter(item => {\r\n                if (!this.filter) return true;\r\n                const filter = this.filter.toLowerCase();\r\n                return (item.title.toLowerCase().indexOf(filter) > -1)\r\n            });\r\n        },\r\n        filteredFinishedItems() {\r\n            return this.finishedToDos.filter(item => {\r\n                if (!this.filter) return true;\r\n                const filter = this.filter.toLowerCase();\r\n                return (item.title.toLowerCase().indexOf(filter) > -1)\r\n            });\r\n        },\r\n        selectedRows() {\r\n            return this.assigneeItems.filter(item => item.selected)\r\n        }\r\n    },\r\n    mounted() {\r\n        // Set the initial number of items\r\n        this.totalRows = this.filteredItems.length\r\n        this.totalFinishedRows = this.filteredFinishedItems.length\r\n    },\r\n    methods: {\r\n        //filter items\r\n        onFiltered(filteredItems) {\r\n            // Trigger pagination to update the number of buttons/pages due to filtering\r\n            this.totalRows = filteredItems.length\r\n            this.totalFinishedRows = filteredItems.length\r\n            this.currentPage = 1\r\n        },\r\n        // send GET request to API to fetch all todos\r\n        fetchAllToDos: async function () {\r\n            this.items = await fetchAllToDos();\r\n            this.finishedToDos = this.items.filter(todo => todo.finished === true);\r\n            this.items.forEach(item => {\r\n                item.dueDate = new Date(item.dueDate);\r\n                item.createdDate = new Date(item.createdDate);\r\n                item.finishedDate = new Date(item.finishedDate);\r\n            });\r\n            this.items = this.items.filter(todo => todo.finished === false);\r\n        },\r\n        //send GET request to API to fetch all assignees\r\n        fetchAllAssignees: async function () {\r\n            this.assigneeItems = await fetchAllAssignees();\r\n            //sets preselected assignees of todos\r\n            for (const element of this.items) {\r\n                for (const assignee of this.assignees) {\r\n                    if (element.id === assignee.id) {\r\n                        this.$set(element, 'selected', true);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        //show modal to create new todo\r\n        createToDo: function () {\r\n            this.show = true;\r\n            this.assignees = [];\r\n            this.fetchAllAssignees();\r\n            this.todo = {\r\n                title: \"\",\r\n                description: \"\",\r\n                finished: false,\r\n                assigneeIdList: [],\r\n                dueDate: \"\",\r\n                finishedDate: \"\"\r\n            }\r\n        },\r\n        csvExport: async function () {\r\n            await csvExport();\r\n            showToastMessage(this, \"Alert\", `Successfully exported all Todos as CSV!`, \"success\");\r\n        },\r\n        selectAssignees: function (todo) {\r\n            //updates the assigneeIdList of the todo\r\n            let assigneeIds = [];\r\n            this.selectedRows.forEach(\r\n                assignee => assigneeIds.push(JSON.stringify(assignee.id)));\r\n            todo.assigneeIdList = assigneeIds;\r\n            this.assignees = this.selectedRows;\r\n        },\r\n        // sets the selected assignees of the todo\r\n        rowClicked(item) {\r\n            rowClickedItem(item);\r\n        },\r\n        deleteToDo: async function (id) {\r\n            await deleteToDoById(id);\r\n            showToastMessage(this, \"Alert\", `Successfully deleted todo with ID ${id}!`, \"success\");\r\n            this.showDelete = false;\r\n            await this.fetchAllToDos();\r\n        },\r\n        showDeleteModal: function (id) {\r\n            this.todo.id = id;\r\n            this.showDelete = true;\r\n        },\r\n        updateFinished: function (todo) {\r\n            const toDoToUpdate = transformDTO(todo);\r\n            // send PUT request to API to update a specific todo by ID\r\n            axios.put(`${config.apiBaseUrl}/todos/${todo.id}`, toDoToUpdate\r\n            ).then(() => {\r\n                showToastMessage(this, \"Alert\", `Successfully updated finished status of todo with ID ${todo.id}!`, \"success\"\r\n                );\r\n                this.fetchAllToDos();\r\n            });\r\n        },\r\n        // executed on form submit\r\n        onSubmitToDo: function (event) {\r\n            this.selectAssignees(this.todo);\r\n            event.preventDefault();\r\n            axios\r\n                .post(`${config.apiBaseUrl}/todos`, this.todo)\r\n                .then((response) => {\r\n                    this.todo.createdDate = this.DateNow;\r\n                    showToastMessage(this, \"Alert\", `Successfully created a new todo with ID ${response.data.id}!`, \"success\");\r\n                    this.fetchAllToDos();\r\n                    this.show = false;\r\n                    this.assignees = [];\r\n                })\r\n                .catch((error) => {\r\n                    const errObject = error.response.data.errors[0];\r\n                    showToastMessage(this, \"Alert\", `Error: ${errObject.field} ${errObject.defaultMessage}!`, \"danger\");\r\n                });\r\n        }\r\n    },\r\n    // executed after the component has been started\r\n    created: function () {\r\n        this.fetchAllToDos();\r\n        this.assigneeFields = assigneeSelectTableFields();\r\n        this.fields = toDoTableFields();\r\n        this.finishedFields = toDoTableFinishedFields();\r\n    }\r\n};\r\n</script>\r\n<style>\r\n@import '../assets/stylesheet.css';\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}